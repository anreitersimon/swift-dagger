import DependencyInjection
import TestModule

extension MockFile_Module {
    internal static func register_MockFile(in registry: DependencyRegistry) {
        registry.registerScope(CustomScope.self)
        Mock.ExplicitelyInitialized.register(in: registry)
        Mock.ExplicitelyInitialized.Nested.register(in: registry)
        Mock.ImplicitInitializer.register(in: registry)
        register_Binding_Protocol_bind_CustomScope(in: registry)
        register_Binding_Protocol_bind_GlobalScope_MyQualifier(in: registry)
    }
}
public protocol Provides_CustomScope: Provides_GlobalScope {}
extension CustomScope: Provides_CustomScope {}
extension Mock.ExplicitelyInitialized {
    fileprivate static func register(in registry: DependencyRegistry) {
        registry.registerFactory(
            ofType: Mock.ExplicitelyInitialized.self,
            in: CustomScope.self,
            qualifier: Qualifiers.Default.self,
            requirements: [
                "a": TypeID(I.self, qualifier: Qualifiers.Default.self)
            ]
        ) { resolver in
            Mock.ExplicitelyInitialized(
                a: resolver.resolve(qualifier: Qualifiers.Default.self)
            )
        }
    }
}
extension DependencyContainer where Scope: Provides_CustomScope {
    internal func explicitelyInitialized() -> Mock.ExplicitelyInitialized {
        self.resolve(qualifier: Qualifiers.Default.self)
    }
}
extension Mock.ExplicitelyInitialized.Nested {
    fileprivate static func register(in registry: DependencyRegistry) {
        registry.registerFactory(
            ofType: Mock.ExplicitelyInitialized.Nested.self,
            in: GlobalScope.self,
            qualifier: Qualifiers.Default.self,
            requirements: [:]
        ) { resolver in Mock.ExplicitelyInitialized.Nested() }
    }
}
extension DependencyContainer where Scope: Provides_GlobalScope {
    internal func nested() -> Mock.ExplicitelyInitialized.Nested {
        self.resolve(qualifier: Qualifiers.Default.self)
    }
}
extension Mock.ImplicitInitializer {
    fileprivate static func register(in registry: DependencyRegistry) {
        registry.registerAssistedFactory(
            ofType: Mock.ImplicitInitializer.self,
            in: GlobalScope.self,
            qualifier: Qualifiers.Default.self,
            requirements: [
                "a": TypeID(I.self, qualifier: Qualifiers.Default.self)
            ]
        )
    }
}
extension DependencyContainer where Scope: Provides_GlobalScope {
    internal func implicitInitializer(b: Int) -> Mock.ImplicitInitializer {
        Mock.ImplicitInitializer(
            a: resolver.resolve(qualifier: Qualifiers.Default.self),
            b: b
        )
    }
}
private func register_Binding_Protocol_bind_CustomScope(
    in registry: DependencyRegistry
) {
    registry.registerFactory(
        ofType: Protocol.self,
        in: CustomScope.self,
        qualifier: Qualifiers.Default.self,
        requirements: [:]
    ) { resolver in Dependencies.Bindings<CustomScope>.bind() }
}
extension DependencyContainer where Scope: Provides_CustomScope {
    internal func bind() -> Protocol {
        self.resolve(qualifier: Qualifiers.Default.self)
    }
}
private func register_Binding_Protocol_bind_GlobalScope_MyQualifier(
    in registry: DependencyRegistry
) {
    registry.registerFactory(
        ofType: Protocol.self,
        in: GlobalScope.self,
        qualifier: Qualifiers.MyQualifier.self,
        requirements: [:]
    ) { resolver in Dependencies.Bindings<GlobalScope>.bind() }
}
extension DependencyContainer where Scope: Provides_GlobalScope {
    internal func bind() -> Protocol {
        self.resolve(qualifier: Qualifiers.MyQualifier.self)
    }
}
