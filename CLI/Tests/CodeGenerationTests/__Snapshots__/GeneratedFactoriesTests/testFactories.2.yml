bindings:
- accessLevel: internal
  factoryMethod:
    arguments:
    - firstName: a
      type:
        simple:
          name: ImplicitInitializer
    generics:
      requirements:
      - isSameType: true
        left:
          simple:
            name: Scope
        right:
          simple:
            name: CustomScope
    modifiers:
    - static
    name: bind
    returnType:
      simple:
        name: Protocol
  kind: Injectable
  qualifiers: {}
  scope:
    simple:
      name: CustomScope
  type:
    simple:
      name: Protocol
- accessLevel: internal
  factoryMethod:
    arguments:
    - firstName: a
      type:
        simple:
          name: ImplicitInitializer
    attributes:
    - name: Qualifiers.MyQualifier
    modifiers:
    - static
    name: bind
    returnType:
      simple:
        name: Protocol
  kind: Injectable
  qualifiers:
    custom: MyQualifier
  scope:
    simple:
      name: GlobalScope
  type:
    simple:
      name: Protocol
fileName: MockFile
imports:
- path: TestModule
module: Mock
provides:
- accessLevel: internal
  fullName: Mock.ExplicitelyInitialized
  initializer:
    arguments:
    - attributes:
      - name: Inject
      firstName: a
      type:
        simple:
          name: I
    - defaultValue: '1'
      firstName: bla
      type:
        simple:
          name: Int
  kind: Injectable
  name: ExplicitelyInitialized
  qualifiers: {}
  scope:
    simple:
      name: CustomScope
- accessLevel: internal
  fullName: Mock.ExplicitelyInitialized.Nested
  initializer: {}
  kind: Injectable
  name: Nested
  qualifiers: {}
  scope:
    simple:
      name: GlobalScope
- accessLevel: internal
  fullName: Mock.ImplicitInitializer
  initializer:
    arguments:
    - attributes:
      - arguments:
        - argument: Qualifiers.MyQualifier.self
        name: Inject
      firstName: a
      type:
        simple:
          name: I
    - attributes:
      - name: Assisted
      firstName: b
      type:
        simple:
          name: Int
    - defaultValue: '1'
      firstName: bla
      type:
        simple:
          name: Int
  kind: Injectable
  name: ImplicitInitializer
  qualifiers: {}
  scope:
    simple:
      name: GlobalScope
scopes:
- name: CustomScope
  parent:
    simple:
      name: GlobalScope
uses:
- arguments:
  - firstName: a
    type:
      simple:
        name: ImplicitInitializer
- arguments:
  - firstName: a
    type:
      simple:
        name: ImplicitInitializer
- arguments:
  - attributes:
    - name: Inject
    firstName: a
    type:
      simple:
        name: I
  - defaultValue: '1'
    firstName: bla
    type:
      simple:
        name: Int
- arguments: []
- arguments:
  - attributes:
    - arguments:
      - argument: Qualifiers.MyQualifier.self
      name: Inject
    firstName: a
    type:
      simple:
        name: I
  - attributes:
    - name: Assisted
    firstName: b
    type:
      simple:
        name: Int
  - defaultValue: '1'
    firstName: bla
    type:
      simple:
        name: Int
